#!/usr/bin/env -S npx tsx
// @ts-check

/**
 * This script generates the src/protobufs directory from the proto files in the
 * repos specified in `REPOS`. It uses `buf` to generate TS files from the proto
 * files, and then generates an `index.ts` file to re-export the generated code.
 */

import { spawnSync } from "node:child_process";
import degit from "degit";
import { mkdirSync, readFileSync, rmSync, writeFileSync } from "node:fs";
import { globSync } from "glob";
import { join } from "node:path";

function capitalize(str: string) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

const main = async () => {
  /**
   * @typedef Repo
   * @type {object}
   * @property {string} repo - Git repo and branch to clone
   * @property {string[]} paths - Paths to proto files relative to the repo root
   */

  /**
   * TODO: Add more repos here when necessary.
   * @type {Repo[]}
   */
  const REPOS = [
    {
      repo: "cosmos/cosmos-sdk#v0.47.9",
      paths: ["proto"],
    },
    {
      repo: "cosmos/ics23#master",
      paths: ["proto"],
    },
    {
      repo: "cosmos/ibc-go#main",
      paths: ["proto"],
    },
    {
      repo: "CosmWasm/wasmd#main",
      paths: ["proto"],
    },
    {
      repo: "osmosis-labs/osmosis#main",
      paths: ["proto"],
    },
    {
      repo: "InjectiveLabs/sdk-go#master",
      paths: ["proto"],
    },
    {
      repo: "evmos/ethermint#main",
      paths: ["proto"],
    },
  ];

  const PROTOBUFS_DIR = join(__dirname, "..", "protobufs");
  const TMP_DIR = join(PROTOBUFS_DIR, "..", ".tmp");
  /** Generates a unique dirname from `repo` to use in `TMP_DIR`. */
  const id = (repo: string) => repo.replace(/[#/]/g, "-");

  console.log("Initialising directories...");

  rmSync(PROTOBUFS_DIR, { recursive: true, force: true });
  rmSync(TMP_DIR, { recursive: true, force: true });
  mkdirSync(PROTOBUFS_DIR);
  mkdirSync(TMP_DIR);

  console.log("Cloning required repos...");

  await Promise.all(REPOS.map(({ repo }) => degit(repo).clone(join(TMP_DIR, id(repo)))));

  console.log("Generating TS files from proto files...");

  for (const { repo, paths } of REPOS) {
    for (const path of paths) {
      spawnSync(
        "pnpm",
        [
          "buf",
          "generate",
          join(TMP_DIR, id(repo), path),
          "--include-imports",
          "--output",
          PROTOBUFS_DIR,
        ],
        {
          cwd: process.cwd(),
          stdio: "inherit",
        },
      );
    }
    console.log(`✔️ [${repo}]`);
  }

  console.log("Generating src/index.ts file and renaming exports...");
  {
    const LAST_SEGMENT_REGEX = /[^/]+$/;
    const EXPORTED_NAME_REGEX = /^export \w+ (\w+)\s*=/gm;
    let contents = "/** This file is generated by gen-protobufs. Do not edit. */ \n\n";

    function generateIndexExports(dir: string) {
      const files = globSync(join(dir, "*"));
      if (files.length === 0) {
        return;
      }
      const prefixName = dir
        .replace(PROTOBUFS_DIR + "/", "")
        .split("/")
        .map((name: string) =>
          // convert all names to PascalCase
          name
            .split(/[-_]/)
            .map(capitalize)
            .join(""),
        )
        .join("");
      for (const file of files) {
        const fileName = file.match(LAST_SEGMENT_REGEX)?.[0];
        if (!fileName) {
          console.error("Could not find name for", file);
          continue;
        }
        if (!fileName.endsWith(".ts")) {
          continue;
        }
        const isCosmes = fileName.includes("cosmes");
        const code = readFileSync(file, "utf8");
        contents += isCosmes ? "export {\n" : "export type {\n";
        for (const match of code.matchAll(EXPORTED_NAME_REGEX)) {
          const exportedName = match[1];
          contents += `  ${exportedName} as ${prefixName + exportedName},\n`;
        }
        const exportedFile = file.replace(PROTOBUFS_DIR + "/", "").replace(".ts", ".js");
        contents += `} from "./${exportedFile}";\n`;
      }
      for (const file of files) {
        generateIndexExports(file);
      }
    }
    generateIndexExports(PROTOBUFS_DIR);
    writeFileSync(join(PROTOBUFS_DIR, "index.ts"), contents);
  }

  console.log("Rewriting Injective's legacy CosmWasm dependencies...");
  {
    const path = join(PROTOBUFS_DIR, "injective", "wasmx", "v1", "proposal_pb.ts");
    const contents = readFileSync(path, "utf8").replace("proposal_pb.js", "proposal_legacy_pb.js");
    writeFileSync(path, contents);
  }

  console.log("Cleaning up...");

  rmSync(TMP_DIR, { recursive: true, force: true });

  console.log("Proto generation completed successfully!");
};

main().catch((error) => {
  console.error(error);
  process.exit(1);
});
